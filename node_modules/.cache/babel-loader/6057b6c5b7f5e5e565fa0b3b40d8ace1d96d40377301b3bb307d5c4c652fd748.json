{"ast":null,"code":"import React,{useState}from'react';import FlowBuilder from'./components/FlowBuilder';import SideBar from'./components/Sidebar';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedNodeId,setSelectedNodeId]=useState(null);const[nodes,setNodes]=useState([]);const[edges,setEdges]=useState([]);const[saveMessage,setSaveMessage]=useState('');const handleNodeClick=nodeId=>{setSelectedNodeId(nodeId);setSaveMessage('');};const handleSaveFlow=()=>{if(nodes.length<=1){setSaveMessage('Flow Saved');return;}// Get all node IDs that are sources of edges\nconst connectedSourceIds=new Set(edges.map(edge=>edge.source));// Find nodes that don't have outgoing connections (unconnected end nodes)\nconst unconnectedEndNodes=nodes.filter(node=>!connectedSourceIds.has(node.id));if(unconnectedEndNodes.length>1){setSaveMessage('Error: More than one node has an empty source handle. Each flow should have only one end node.');}else{setSaveMessage('Flow Saved');}};const clearSelection=()=>{setSelectedNodeId(null);setSaveMessage('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"ChatBot Flow Builder\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-controls\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleSaveFlow,className:\"save-button\",children:\"Save Flow\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearSelection,className:\"clear-button\",children:\"Clear Selection\"})]}),saveMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"save-message  \".concat(saveMessage.includes('Error')?'error':'success'),children:saveMessage})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-content\",children:[/*#__PURE__*/_jsx(SideBar,{selectedNodeId:selectedNodeId,setNodes:setNodes,nodes:nodes}),/*#__PURE__*/_jsx(FlowBuilder,{nodes:nodes,setNodes:setNodes,edges:edges,setEdges:setEdges,onNodeClick:handleNodeClick})]})]});}export default App;","map":{"version":3,"names":["React","useState","FlowBuilder","SideBar","jsx","_jsx","jsxs","_jsxs","App","selectedNodeId","setSelectedNodeId","nodes","setNodes","edges","setEdges","saveMessage","setSaveMessage","handleNodeClick","nodeId","handleSaveFlow","length","connectedSourceIds","Set","map","edge","source","unconnectedEndNodes","filter","node","has","id","clearSelection","className","children","onClick","concat","includes","onNodeClick"],"sources":["C:/Users/singh/OneDrive/Desktop/ChatBot_Flow/src/App.js"],"sourcesContent":["import React , {useState} from 'react';\r\nimport FlowBuilder from './components/FlowBuilder';\r\nimport SideBar from './components/Sidebar';\r\nimport './App.css';\r\n\r\n\r\nfunction App(){\r\n    const [selectedNodeId , setSelectedNodeId] = useState(null);\r\n    const [nodes , setNodes] = useState([]);\r\n    const [edges , setEdges] = useState([]);\r\n    const [saveMessage , setSaveMessage] = useState('');\r\n    \r\n    const handleNodeClick = (nodeId) =>{\r\n        setSelectedNodeId(nodeId);\r\n        setSaveMessage('');\r\n    };\r\n    const handleSaveFlow = () =>{\r\n        if(nodes.length <= 1){\r\n            setSaveMessage('Flow Saved');\r\n            return;\r\n        }\r\n        // Get all node IDs that are sources of edges\r\n        const connectedSourceIds = new Set(edges.map(edge => edge.source));\r\n       \r\n       // Find nodes that don't have outgoing connections (unconnected end nodes)\r\n        const unconnectedEndNodes = nodes.filter(node => !connectedSourceIds.has(node.id));\r\n\r\n        if(unconnectedEndNodes.length > 1){\r\n            setSaveMessage('Error: More than one node has an empty source handle. Each flow should have only one end node.')\r\n        } else {\r\n            setSaveMessage('Flow Saved');\r\n        }\r\n    };\r\n\r\n    const clearSelection = () => {\r\n        setSelectedNodeId(null);\r\n        setSaveMessage('');\r\n    };\r\n\r\n    return (\r\n      <div className='app'>\r\n        <div className='app-header'>\r\n            <h1>ChatBot Flow Builder</h1>\r\n            <div className='app-controls'>\r\n                <button onClick={handleSaveFlow} className='save-button'>\r\n                    Save Flow\r\n                </button>\r\n                <button onClick={clearSelection} className='clear-button'>\r\n                    Clear Selection\r\n                </button>\r\n            </div>\r\n            {saveMessage && (\r\n                <div className={`save-message  ${saveMessage.includes('Error') ? 'error' : 'success'}`}> \r\n                {saveMessage}\r\n              </div>  \r\n            )}\r\n        </div>\r\n        <div className='app-content'>\r\n            <SideBar\r\n            selectedNodeId={selectedNodeId}\r\n            setNodes = {setNodes}\r\n            nodes = {nodes}\r\n            />\r\n            <FlowBuilder\r\n              nodes = {nodes}\r\n              setNodes = {setNodes}\r\n              edges = {edges}\r\n              setEdges={setEdges}\r\n              onNodeClick = {handleNodeClick}\r\n            />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}