{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\singh\\\\OneDrive\\\\Desktop\\\\ChatBot_Flow\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FlowBuilder from './components/FlowBuilder';\nimport SideBar from './components/Sidebar';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [saveMessage, setSaveMessage] = useState('');\n  const handleNodeClick = nodeId => {\n    setSelectedNodeId(nodeId);\n    setSaveMessage('');\n  };\n  const handleSaveFlow = () => {\n    if (nodes.length <= 1) {\n      setSaveMessage('Flow Saved');\n      return;\n    }\n    // Get all node IDs that are sources of edges\n    const connectedSourceIds = new Set(edges.map(edge => edge.source));\n\n    // Find nodes that don't have outgoing connections (unconnected end nodes)\n    const unconnectedEndNodes = nodes.filter(node => !connectedSourceIds.has(node.id));\n    if (unconnectedEndNodes.length > 1) {\n      setSaveMessage('Error: More than one node has an empty source handle. Each flow should have only one end node.');\n    } else {\n      setSaveMessage('Flow Saved');\n    }\n  };\n  const clearSelection = () => {\n    setSelectedNodeId(null);\n    setSaveMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ChatBot Flow Builder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveFlow,\n          className: \"save-button\",\n          children: \"Save Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearSelection,\n          className: \"clear-button\",\n          children: \"Clear Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `save-message  ${saveMessage.includes('Error') ? 'error' : 'success'}`,\n        children: saveMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideBar, {\n        selectedNodeId: selectedNodeId,\n        setNodes: setNodes,\n        nodes: nodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FlowBuilder, {\n        nodes: nodes,\n        setNodes: setNodes,\n        edges: edges,\n        setEdges: setEdges,\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"HbvsQW0DMfN5oF/FLsmRNqJyoBY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","FlowBuilder","SideBar","jsxDEV","_jsxDEV","App","_s","selectedNodeId","setSelectedNodeId","nodes","setNodes","edges","setEdges","saveMessage","setSaveMessage","handleNodeClick","nodeId","handleSaveFlow","length","connectedSourceIds","Set","map","edge","source","unconnectedEndNodes","filter","node","has","id","clearSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","includes","onNodeClick","_c","$RefreshReg$"],"sources":["C:/Users/singh/OneDrive/Desktop/ChatBot_Flow/src/App.js"],"sourcesContent":["import React , {useState} from 'react';\r\nimport FlowBuilder from './components/FlowBuilder';\r\nimport SideBar from './components/Sidebar';\r\nimport './App.css';\r\n\r\n\r\nfunction App(){\r\n    const [selectedNodeId , setSelectedNodeId] = useState(null);\r\n    const [nodes , setNodes] = useState([]);\r\n    const [edges , setEdges] = useState([]);\r\n    const [saveMessage , setSaveMessage] = useState('');\r\n    \r\n    const handleNodeClick = (nodeId) =>{\r\n        setSelectedNodeId(nodeId);\r\n        setSaveMessage('');\r\n    };\r\n    const handleSaveFlow = () =>{\r\n        if(nodes.length <= 1){\r\n            setSaveMessage('Flow Saved');\r\n            return;\r\n        }\r\n        // Get all node IDs that are sources of edges\r\n        const connectedSourceIds = new Set(edges.map(edge => edge.source));\r\n       \r\n       // Find nodes that don't have outgoing connections (unconnected end nodes)\r\n        const unconnectedEndNodes = nodes.filter(node => !connectedSourceIds.has(node.id));\r\n\r\n        if(unconnectedEndNodes.length > 1){\r\n            setSaveMessage('Error: More than one node has an empty source handle. Each flow should have only one end node.')\r\n        } else {\r\n            setSaveMessage('Flow Saved');\r\n        }\r\n    };\r\n\r\n    const clearSelection = () => {\r\n        setSelectedNodeId(null);\r\n        setSaveMessage('');\r\n    };\r\n\r\n    return (\r\n      <div className='app'>\r\n        <div className='app-header'>\r\n            <h1>ChatBot Flow Builder</h1>\r\n            <div className='app-controls'>\r\n                <button onClick={handleSaveFlow} className='save-button'>\r\n                    Save Flow\r\n                </button>\r\n                <button onClick={clearSelection} className='clear-button'>\r\n                    Clear Selection\r\n                </button>\r\n            </div>\r\n            {saveMessage && (\r\n                <div className={`save-message  ${saveMessage.includes('Error') ? 'error' : 'success'}`}> \r\n                {saveMessage}\r\n              </div>  \r\n            )}\r\n        </div>\r\n        <div className='app-content'>\r\n            <SideBar\r\n            selectedNodeId={selectedNodeId}\r\n            setNodes = {setNodes}\r\n            nodes = {nodes}\r\n            />\r\n            <FlowBuilder\r\n              nodes = {nodes}\r\n              setNodes = {setNodes}\r\n              edges = {edges}\r\n              setEdges={setEdges}\r\n              onNodeClick = {handleNodeClick}\r\n            />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}